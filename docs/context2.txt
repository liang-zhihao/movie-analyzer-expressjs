Act as a senior javascript developer, you are going to develop a backend application using Node, Express, node-MySQL2 , Swagger , Knex, JSON Web Tokens. Use ES6 with module
 CREATE TABLE users
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    firstName VARCHAR(255) NULL,
    lastName VARCHAR(255) NULL,
    dob DATE NULL,
    address VARCHAR(255) NULL,
    CONSTRAINT uc_email UNIQUE (email)
) COLLATE='utf8mb4_unicode_ci';
Here is requirements:
```
All routes:
 The authentication endpoints (/user/register, /user/login, /user/refresh and /user/logout) all
need to be interacted with via HTTP POST requests. The body of the first two requests 
should include an email and password. 
Authentication endpoints 
HTTP Request Route
POST /user/register
If a user is successfully registered, the returned response will be:
{ 
 "message": "User created"
} 
POST /user/login
request body
{
    "email":"1@2.com",
    "password":"123"
}
If a user successfully logs in, the returned response will be:
{ 
 "bearerToken": {
 "token": "<<some token here>>", 
 "token_type": "Bearer", 
 "expires_in": 600
 },
 "refreshToken": {
 "token": "<<some other token here>>", 
 "token_type": "Refresh", 
 "expires_in": 86400
 } 
} 

POST /user/refresh
request body:
{
    "refreshToken":"eyJ"
}
401:
{
    "error": true,
    "message": "JWT token has expired"
}
200:
{ 
 "bearerToken": {
 "token": "<<some token here>>", 
 "token_type": "Bearer", 
 "expires_in": 600
 },
 "refreshToken": {
 "token": "<<some other token here>>", 
 "token_type": "Refresh", 
 "expires_in": 86400
 } 
} 
POST /user/logout
request body:
{
    "refreshToken":"eyJ"
}
401:
{
    "error": true,
    "message": "JWT token has expired"
}
200:
{
    "error": false,
    "message": "Token successfully invalidated"
}

The profile routes
You are required to, provide, in addition to the routes in the Assignment 2 API, two additional routes: 
GET /user/{email}/profile and PUT /user/{email}/profile. You need to implement these routes and 
add documentation to them to the Swagger file.
GET /user/{email}/profile
This route returns a user’s profile information as a JSON object. There are two different types of 
output presented here – one if the request is authorised, and the other if it is not. An unauthorised 
request (without an ‘Authorized:’ header) will receive an object like this:
200 OK
{
 "email": "mike@gmail.com",
 "firstName": "Michael",
 "lastName": "Jordan"
}
The same request, but with a valid JWT bearer token, will receive an object like this, with additional 
fields for date of birth and address.
200 OK
{
 "email": "mike@gmail.com",
 "firstName": "Michael",
 "lastName": "Jordan",
 "dob": "1963-02-17",
 "address": "123 Fake Street, Springfield"
}
The above two examples are of successful requests, which come with the HTTP status code of 200. 
However, if there is a problem with the JWT token, your server will return one of the following 
responses with a status code of 401 Unauthorized.
If the JWT token has expired:
401 Unauthorized
{
 "error": true,
 "message": "JWT token has expired"
}
If the JWT token failed verification:
401 Unauthorized
{
 "error": true,
 "message": "Invalid JWT token"
}
If there was an ‘Authorization:’ header, but it did not contain ‘Bearer ‘ followed by the JWT:
401 Unauthorized
{
 "error": true,
 "message": "Authorization header is malformed"
}
If {email} corresponds to a non-existent user, the following response will be returned with a status 
code of 404 Not Found:
404 Not Found
{
 "error": true,
 "message": "User not found"
}
Note that a newly created user will not have any of these fields filled in. Your server will return null 
for any fields that have not been provided, e.g.:
200 OK
{
 "email": "notmike@gmail.com",
 "firstName": null,
 "lastName": null,
 "dob": null,
 "address": null
}
PUT /user/{email}/profile
This is used to provide profile information. The request will contain a body with the application/json 
content-type containing profile fields in the same format that they are returned with GET 
/user/{email}/profile (except without the email address):
{
 "firstName": "Michael",
 "lastName": "Jordan",
 "dob": "1963-02-17",
 "address": "123 Fake Street, Springfield"
}
Users can only change their own profile information. In other words, if you are logged in as 
mike@gmail.com, you can change the profile of mike@gmail.com, but not any other user.
If you successfully update a profile, the response will be an object containing the updated profile:
200 OK
{
 "email": "mike@gmail.com",
 "firstName": "Michael",
 "lastName": "Jordan",
 "dob": "1963-02-17",
 "address": "123 Fake Street, Springfield"
}
If the user is logged in with the wrong email (that is, the JWT is provided and is valid, but the 
credentials do not belong to the user whose profile the user is attempting to modify) your server will 
return the following:
403 Forbidden
{
 "error": true,
 "message": "Forbidden"
}
If there is no Authorization: header:
401 Unauthorized
{
 "error": true,
 "message": "Authorization header ('Bearer token') not found"
}
If the JWT token has expired:
401 Unauthorized
{
 "error": true,
 "message": "JWT token has expired"
}
If the JWT token failed verification:
401 Unauthorized
{
 "error": true,
 "message": "Invalid JWT token"
}
If there was an ‘Authorization:’ header, but it did not contain ‘Bearer ‘ followed by the JWT:
401 Unauthorized
{
 "error": true,
 "message": "Authorization header is malformed"
}
If {email} corresponds to a non-existent user, the following response will be returned with a status 
code of 404 Not Found:
404 Not Found
{
 "error": true,
 "message": "User not found"
}
If the submitted object does not contain all of the fields:
400 Bad Request
{
 "error": true,
 "message": "Request body incomplete: firstName, lastName, dob and address 
are required"
}
If any of the fields are not strings:
400 Bad Request
{
 "error": true,
 "message": "Request body invalid: firstName, lastName, dob and address 
must be strings only"
}
If the date of birth is not a valid YYYY-MM-DD date (e.g. no April 31 or February 30, or February 29 on 
a non-leap year):
400 Bad Request
{
 "error": true,
 "message": "Invalid input: dob must be a real date in format YYYY-MM-DD"
}
The HTTP method used for this endpoint is PUT. PUT is a HTTP method similar to POST, though with 
different semantics. You can install express middleware for a PUT method with .put(), just as you 
use .post() to set up POST routes.
Your task is to implement both of these routes on the server, and also to modify the Swagger doc to 
document these routes, including all of the error codes.
Grade standards
We expect that you will follow a professional approach in the architecture and construction of the 
server. In particular:
• The routes and the overall structure are professional – logical and uncluttered, with 
appropriate use of specific routers mounted on the application
• There is appropriate use of middleware for managing components such as database 
connectivity and security
• There is appropriate error handling and the responses match those listed in the Swagger 
documentation (or in this specification, in the case of the profile routes)
• That the Swagger documentation has been amended to include both of the new profile 
routes and that the documentation matches the specification for these routes, as is 
documented in this file
• The application successfully serves the Swagger docs on the home page route
• The application is successfully deployed to a QUT VM using HTTPS with a self-signed 
certificate
• There is appropriate attention to application securit
``` {{problem}}
